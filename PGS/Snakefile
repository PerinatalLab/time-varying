import pandas as pd
import numpy as np

CHR_nms= range(1,24)
ext_nms= ['bed','bim','fam']
ext_profile=("log","nopred","nosex","profile")

rule all:
	''
	input:
		expand('Results/best_beta_validation.{ext}', ext=ext_profile),
		'Results/PGS.txt' 

rule create_training_dataset:
	'format Julius data'

	input:
		'/mnt/work2/jjuod/tv/ga_cleaned.csv'

	output:
		'Data/GA_pheno.txt'

	conda:
		'Scripts/env_r.yml'

	script:
		'Scripts/phenotype_prep.R'



rule filter_info_score:
	'filter out low quality variants from genotype files using info score and allele frequencies'
	#HQ_snps are high quality snps after filtering on info and EAF

	input:
		'/mnt/archive/MOBAGENETICS/genotypes-base/aux/markerinfo/{CHR}-markerinfo'

	output:
		'Data/HQ_snps/snp_list_range_{CHR}.txt'

	run:
		d= pd.read_csv(input[0], sep= '\t', header= 0)
		d.columns= ['CHR', 'POS', 'ID', 'REF', 'ALT', 'TYPED', 'INFO', 'EAF']
		d= d.loc[d.INFO> 0.7, :]
		d= d.loc[(d.EAF> 0.01) & (d.EAF< 0.99), :]
		if '23' in input[0]: d.CHR= 23
		d['POS2']= d.POS
		d= d[['CHR', 'POS', 'POS2', 'ID']]
		d.to_csv(output[0], sep= '\t', header= False, index= False)


rule QC_training_genotypes:
	'Need to QC the MoBa Genotpyed data to only include people in Julius cohort'

	input:
		'/mnt/archive/MOBAGENETICS/genotypes-base/imputed/all/plink/{CHR}.bed',
		'Data/GA_pheno.txt',
		'Data/HQ_snps/snp_list_range_{CHR}.txt'

	params:
		'/mnt/archive/MOBAGENETICS/genotypes-base/imputed/all/plink/{CHR}', 
		'Data/Plink_QC_snplist/{CHR}.QC'

	output:
		temp(expand('Data/Plink_QC_snplist/{{CHR}}.QC.{ext}',  ext=['snplist', 'nosex', 'log', 'fam']))
	
#	conda:
		#'Scripts/env_r.yml'

	shell:
		'''
			/usr/bin/plink1.9 \
				--bfile {params[0]} \
				--keep {input[1]} \
				--extract range {input[2]} \
				--maf 0.01 \
				--hwe 1e-6 \
				--geno 0.01 \
				--mind 0.01 \
				--write-snplist \
				--make-just-fam \
				--out {params[1]}
		'''


rule Filter_snps:
	'filter genotypes keeping only snps for only people in Julius data'

	input:
		'/mnt/archive/MOBAGENETICS/genotypes-base/imputed/all/plink/{CHR}.bed',
		'Data/Plink_QC_snplist/{CHR}.QC.snplist', 
		'Data/GA_pheno.txt'

	params:
		'/mnt/archive/MOBAGENETICS/genotypes-base/imputed/all/plink/{CHR}',
		'Data/Filtered/filtered.{CHR}'

	output:
		temp(expand('Data/Filtered/filtered.{{CHR}}.{ext_bfile}', ext_bfile=ext_nms))

	shell:
		'''
			/usr/bin/plink1.9 \
				--bfile {params[0]} \
				--make-bed \
				--extract {input[1]} \
				--keep {input[2]} \
				--out {params[1]}
		'''


rule bed_file_list:
	'create a list of plink files from the filtered files to merge genotypes together'

	input:
		expand('Data/Filtered/filtered.{CHR}.{ext_bfile}', ext_bfile= ext_nms, CHR=CHR_nms)
	
	output:
		'Data/Filtered/file_list/merge_list.txt'
	
	run:
		bed= [i for i in input if i.endswith('.bed')]
		bim= [i for i in input if i.endswith('.bim')]
		fam= [i for i in input if i.endswith('.fam')]
		d= pd.DataFrame({'bed': bed, 'bim': bim, 'fam': fam})
		d= d.loc[~d.bed.str.endswith('.1.bed'), :]
		d.to_csv(output[0], sep= '\t', header= False, index= False)
		


rule Merge_filtered:
	'Use plink to merge all of the filtered genotyped data together'

	input:
		'Data/Filtered/filtered.1.bed',
		'Data/Filtered/file_list/merge_list.txt',
		expand('Data/Filtered/filtered.{CHR}.{ext_bfile}', ext_bfile= ext_nms, CHR=CHR_nms)

	params:
		'Data/Filtered/filtered.1',
		'Data/Filtered_Merged/GA_genotypes'

	output:
		expand('Data/Filtered_Merged/GA_genotypes.{ext_bfile}', ext_bfile=ext_nms)

	shell:
		'''
			/usr/bin/plink1.9 \
				--bfile {params[0]} \
				--merge-list {input[1]} \
				--make-bed \
				--out {params[1]}
		'''


rule reduce_validation_genotypes:
	'reduce the snps in the validation genotype files to only include snps from the best betas'
	input:
			'Data/Filtered_Merged/GA_genotypes.bed',
			'/mnt/work2/chrisf/meta_gest_duration/prs_80-20_split/GAraw/Training/Results/training/snp_beta.txt'
	params:
			'Data/Filtered_Merged/GA_genotypes',
			'Results/best_beta_validation'
	output:
			expand('Results/best_beta_validation.{ext}', ext=ext_profile)
	shell:
			'''
			/usr/bin/plink1.9 \
					--bfile {params[0]} \
					--score {input[1]} sum  \
					--out {params[1]}
			'''  

rule clean_best_beta_profile:
	'clean the results file keeping only FID and Scoresum (PGS)'

	input:
		'Results/best_beta_validation.profile'
	
	output:
		'Results/PGS.txt'
	
	conda:
		'Scripts/env_r.yml'
	
	script:
		'Scripts/clean_profile_file.R'
